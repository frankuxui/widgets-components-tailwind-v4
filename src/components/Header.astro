---
import { getCollection } from "astro:content";

const widgets = await getCollection("widgets");
const data = widgets
  .map((item) => ({
    slug: item.id,
    category: item.data.category,
    visible: item.data.visible ?? true,
  }))
  .filter((item) => item.visible)
  .sort((a, b) => {
    const categoryA = a.category?.split(" ")?.join("") ?? "";
    const categoryB = b.category?.split(" ")?.join("") ?? "";
    return categoryA === "" && categoryB === "" ? 0 : categoryA.localeCompare(categoryB);
  });

const pageSlug = Astro.url.pathname.split("/")[1];
const pathname = Astro.url.pathname;
---

<header class="z-30 sticky h-16 left-0 w-full top-0 flex items-center justify-center border-b border-border bg-background/60 backdrop-blur-lg">
  <div class="w-full h-full flex items-center justify-between">
    <a href="/" class="relative overflow-hidden flex items-center gap-2 pl-10 lg:px-6 h-full lg:border-r lg:border-border">
      <span class="relative z-1 flex-none text-base font-medium text-foreground">Widgets</span>
    </a>
    <div
      class="hidden lg:block z-0 opacity-80 pointer-events-none h-full w-full flex-1 border-border border-x border-x-(--pattern-fg) bg-[image:repeating-linear-gradient(315deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-black)]/5 dark:[--pattern-fg:var(--color-white)]/10"
    >
    </div>
    <ul class="hidden lg:flex items-center justify-center mx-auto h-full border-x px-6 border-border">
      {
        data
          .filter((item) => item.visible)
          .map((item) => {
            return (
              <li>
                <a
                  href={`/${item.slug}`}
                  class="relative flex items-center justify-center text-xs uppercase py-2 px-3 rounded-full tracking-wider transition-colors duration-200"
                  class:list={{
                    "font-normal text-foreground/70": pageSlug !== item.slug,
                    "font-semibold text-foreground after:absolute after:inset-0 after:border after:border-dashed after:border-sky-300/60 after:bg-sky-400/10 after:group-hover:bg-sky-400/15 dark:after:border-sky-300/30":
                      pageSlug === item.slug,
                  }}
                >
                  {item.category}
                </a>
              </li>
            );
          })
      }
      <li class="relative ml-2">
        <button
          data-toggle="menu-more"
          class="z-[1] relative inline-flex items-center justify-center w-8 h-8 focus:ring-2 transition-all rounded-full border text-foreground border-border bg-background focus:ring-primary data-[state='open']:bg-foreground/10"
        >
          <span class="material-symbols-rounded">more_horiz</span>
        </button>
        <div class="menu-dropdown z-40 flex flex-col absolute mt-2 top-full left-1/2 -translate-x-1/2 w-full min-w-[15rem]" style="display: none;">
          <div class="border p-4 rounded-md shadow-xl bg-background border-border">
            {
              data
                .filter((item) => item.visible === false)
                .map((item) => {
                  return (
                    <a
                      href={`/${item.slug}`}
                      class="relative block py-2 px-4 w-full rounded transition-colors duration-200"
                      class:list={{
                        "text-gray-600 hover:text-black hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-white/5 dark:hover:text-white": pageSlug !== item.slug,
                        "text-black font-bold dark:text-white hover:bg-black/5 dark:hover:bg-white/5": pageSlug === item.slug,
                      }}
                    >
                      {item.category}
                    </a>
                  );
                })
            }
          </div>
        </div>
      </li>
    </ul>
    <div
      class="hidden lg:block z-0 opacity-80 pointer-events-none h-full w-full flex-1 border-border border-x border-x-(--pattern-fg) bg-[image:repeating-linear-gradient(315deg,_var(--pattern-fg)_0,_var(--pattern-fg)_1px,_transparent_0,_transparent_50%)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-black)]/5 dark:[--pattern-fg:var(--color-white)]/10"
    >
    </div>
    <div class="h-full gap-4">
      <div class="h-full flex items-center justify-end gap-4 px-10 lg:px-6 border-l border-border">
        <button data-toggle="theme" class="w-10 h-10 inline-flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
            ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path><path d="M12 3l0 18"></path><path d="M12 9l4.65 -4.65"
            ></path><path d="M12 14.3l7.37 -7.37"></path><path d="M12 19.6l8.85 -8.85"></path></svg
          >
        </button>
        <!-- Menu button -->
        <button
          data-toggle="aside"
          class="flex lg:hidden items-center justify-center w-10 h-10 flex-none transition-colors duration-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 dark:text-white"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line>
          </svg>
        </button>
        <!-- End menu button -->
      </div>
    </div>
  </div>
</header>

<script>
  const themeToggle = document.querySelectorAll('[data-toggle="theme"]');

  // Theme

  const applyTheme = (theme: string) => {
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
      document.documentElement.classList.remove("light");
    } else {
      document.documentElement.classList.add("light");
      document.documentElement.classList.remove("dark");
    }
  };

  // Leer tema guardado o sistema
  const savedTheme = localStorage.getItem("theme");

  if (savedTheme) {
    applyTheme(savedTheme);
  } else {
    // Detectar preferencia del sistema
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      applyTheme("dark");
    } else {
      applyTheme("light");
    }
  }

  // Toggle del tema al hacer click
  themeToggle.forEach((toggle) => {
    toggle.addEventListener("click", () => {
      const currentTheme = document.documentElement.classList.contains("dark") ? "dark" : "light";
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      applyTheme(newTheme);
      localStorage.setItem("theme", newTheme);
    });
  });

  // Escuchar cambios en preferencia del sistema
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
    if (!localStorage.getItem("theme")) {
      applyTheme(e.matches ? "dark" : "light");
    }
  });

  // Menu more toggle

  const menuMoreToggle = document.querySelectorAll('[data-toggle="menu-more"]');
  const menuDropdown = document.querySelectorAll(".menu-dropdown");

  menuMoreToggle.forEach((toggle) => {
    toggle.addEventListener("click", () => {
      const dropdown = toggle.nextElementSibling as HTMLElement;

      if (dropdown.style.display === "none") {
        dropdown.style.display = "block";
      } else {
        dropdown.style.display = "none";
      }
    });
  });

  // Close menu more dropdown when clicking outside of it

  document.addEventListener("click", (e) => {
    menuMoreToggle.forEach((item) => {
      if (!item.contains(e.target as Node)) {
        menuDropdown.forEach((dropdown) => {
          (dropdown as HTMLElement).style.display = "none";
        });
      }
    });
  });

  // Close menu more dropdown when clicking the escape key

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      menuDropdown.forEach((dropdown) => {
        (dropdown as HTMLElement).style.display = "none";
      });
    }
  });
</script>
